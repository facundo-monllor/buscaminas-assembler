en memoria tener variable 
POSICION_BOMBAS: .byte 1,3,5,9,10,20,34,56

// r1 = valor del nivel
// r2 = valor de la mapa 
calcuar cantidad bombas

// generar el vector con las posiciones random
en que posiciones


// poner en el mapa las bombas

//para saber las bombas aledañas de una posicion pasada debemos sumarle 1 para saber la posicion de atras de la posicion







//---------------------------------------------Obtener valor numerico de una cadena de numeros---------------------------------------------

    ldr r0, =cadena_numeros      
    mov r4, #0                   // resultado
    mov r5, #10                  // base por la que se va a multiplicar

ciclo:
    ldrb r2, [r0]                // primer elemento número de la cadena
    cmp r2, #0                   
    beq salir

    sub r2, r2, #0x30            // le restamos 30 en hexadecimal y obtenemos el valor numérico

    mul r4, r4, r5               // multiplica el resultado actual por 10
    add r4, r4, r2               // suma el valor del número actual al resultado

    add r0, r0, #1               // sumamos la direccion de memoria
    bal ciclo

salir:
    ldr r6, =resultado
    str r4, [r6]



-----------------------------------------------------------------------------------------------------------------------------

r7=> tengo un valor random          0 a 15
r8=> tengo otro valor random        0 a 5 si es nivel_chico // 0 a 10 si es nivel_grande
r4=> contador de bombas generadoas

multiplicar r7 y r8 y dejo en r0 

si estoy en nivel chico me fijo si es mayor o igual a 64
si estoy en nivel medio me fijo si es mayor o igual a 144

si es mayor a uno de estos valores o este valor ya esta en el vector -> no sumo bomba, no escribo numero en vector, empiezo el random devuelta
sino => sumo una bomba, escribo el numero en el vector, empiezo el random devuelta



-------------------------------------------------------------------
        ciclo_generar_randoms_ocho:
        cmp r4, r5                          //si la cantidad de bombas generadas == las que necesitamos
        beq salir_ciclo_generar_randoms
    
        mov r7, #0     // entre 0 y 15
        mov r8, #0     // si el mapa es de 64 casillas necesitamos que el segundo random sea maximo 5, si el mapa es de 144 casillas necesitamos que el segundo random sea maximo 10

        bl generarRandom
        mov r7, r0          // esto queda asi

        bl generarRandom
        mov r8, r0

        cmp r3, #64         //si tenemos 64 casillas
        bal nivel_chico

        cmp r8, #11         // si tenemos 144 casillas y r8 es mayor o igual a 11 saltamos a restar_5
        bge restar_5
        bal continuar_flujo     // si es menor a 11 sigue

        restar_5:
        sub r8, #5
        bal continuar_flujo

        restar_10:
        sub r8, #10
        bal continuar_flujo

        restar_4:
        sub r8, #4
        bal continuar_flujo

        nivel_chico:          //r8 tiene que estar entre 0 y 5
        cmp r8, #10           //si r8 es mayor a 10
        bge restar_10

        cmp r8, #6            //si r8 es mayor a 6
        bge restar_4

        mov r0, #0
        mul r0, r7, r8          // multiplicamos los 2 randoms para obtener la posicion de la bomba

        
        cmp r0, #64
        bgt random_no_valido        //si el numero final es mayor a la cantidad de posiciones del mapa saltamos

        add r4, #1  
        //sumar valor en vector 
        //empezar devuelta

        random_no_valido:
            //empezamos devuelta


        continuar_flujo:     //r8 entre 0 y 6/10 y r7 entre 0 y 15
        //seguimos